/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-16")
public class SongLevel implements org.apache.thrift.TBase<SongLevel, SongLevel._Fields>, java.io.Serializable, Cloneable, Comparable<SongLevel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SongLevel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DIFFICULTY_FIELD_DESC = new org.apache.thrift.protocol.TField("difficulty", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RKS_FIELD_DESC = new org.apache.thrift.protocol.TField("rks", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SongLevelStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SongLevelTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  /**
   * 
   * @see Level
   */
  public @org.apache.thrift.annotation.Nullable Level level; // required
  public int s; // required
  public double a; // required
  public boolean c; // required
  public double difficulty; // required
  public double rks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see Level
     */
    LEVEL((short)2, "level"),
    S((short)3, "s"),
    A((short)4, "a"),
    C((short)5, "c"),
    DIFFICULTY((short)6, "difficulty"),
    RKS((short)7, "rks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LEVEL
          return LEVEL;
        case 3: // S
          return S;
        case 4: // A
          return A;
        case 5: // C
          return C;
        case 6: // DIFFICULTY
          return DIFFICULTY;
        case 7: // RKS
          return RKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __S_ISSET_ID = 0;
  private static final int __A_ISSET_ID = 1;
  private static final int __C_ISSET_ID = 2;
  private static final int __DIFFICULTY_ISSET_ID = 3;
  private static final int __RKS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Level.class)));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DIFFICULTY, new org.apache.thrift.meta_data.FieldMetaData("difficulty", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RKS, new org.apache.thrift.meta_data.FieldMetaData("rks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SongLevel.class, metaDataMap);
  }

  public SongLevel() {
  }

  public SongLevel(
    java.lang.String id,
    Level level,
    int s,
    double a,
    boolean c,
    double difficulty,
    double rks)
  {
    this();
    this.id = id;
    this.level = level;
    this.s = s;
    setSIsSet(true);
    this.a = a;
    setAIsSet(true);
    this.c = c;
    setCIsSet(true);
    this.difficulty = difficulty;
    setDifficultyIsSet(true);
    this.rks = rks;
    setRksIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SongLevel(SongLevel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLevel()) {
      this.level = other.level;
    }
    this.s = other.s;
    this.a = other.a;
    this.c = other.c;
    this.difficulty = other.difficulty;
    this.rks = other.rks;
  }

  public SongLevel deepCopy() {
    return new SongLevel(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.level = null;
    setSIsSet(false);
    this.s = 0;
    setAIsSet(false);
    this.a = 0.0;
    setCIsSet(false);
    this.c = false;
    setDifficultyIsSet(false);
    this.difficulty = 0.0;
    setRksIsSet(false);
    this.rks = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public SongLevel setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see Level
   */
  @org.apache.thrift.annotation.Nullable
  public Level getLevel() {
    return this.level;
  }

  /**
   * 
   * @see Level
   */
  public SongLevel setLevel(@org.apache.thrift.annotation.Nullable Level level) {
    this.level = level;
    return this;
  }

  public void unsetLevel() {
    this.level = null;
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return this.level != null;
  }

  public void setLevelIsSet(boolean value) {
    if (!value) {
      this.level = null;
    }
  }

  public int getS() {
    return this.s;
  }

  public SongLevel setS(int s) {
    this.s = s;
    setSIsSet(true);
    return this;
  }

  public void unsetS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
  }

  public void setSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
  }

  public double getA() {
    return this.a;
  }

  public SongLevel setA(double a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A_ISSET_ID);
  }

  /** Returns true if field a is set (has been assigned a value) and false otherwise */
  public boolean isSetA() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A_ISSET_ID, value);
  }

  public boolean isC() {
    return this.c;
  }

  public SongLevel setC(boolean c) {
    this.c = c;
    setCIsSet(true);
    return this;
  }

  public void unsetC() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __C_ISSET_ID);
  }

  /** Returns true if field c is set (has been assigned a value) and false otherwise */
  public boolean isSetC() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __C_ISSET_ID);
  }

  public void setCIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __C_ISSET_ID, value);
  }

  public double getDifficulty() {
    return this.difficulty;
  }

  public SongLevel setDifficulty(double difficulty) {
    this.difficulty = difficulty;
    setDifficultyIsSet(true);
    return this;
  }

  public void unsetDifficulty() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIFFICULTY_ISSET_ID);
  }

  /** Returns true if field difficulty is set (has been assigned a value) and false otherwise */
  public boolean isSetDifficulty() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIFFICULTY_ISSET_ID);
  }

  public void setDifficultyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIFFICULTY_ISSET_ID, value);
  }

  public double getRks() {
    return this.rks;
  }

  public SongLevel setRks(double rks) {
    this.rks = rks;
    setRksIsSet(true);
    return this;
  }

  public void unsetRks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RKS_ISSET_ID);
  }

  /** Returns true if field rks is set (has been assigned a value) and false otherwise */
  public boolean isSetRks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RKS_ISSET_ID);
  }

  public void setRksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Level)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((java.lang.Integer)value);
      }
      break;

    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((java.lang.Double)value);
      }
      break;

    case C:
      if (value == null) {
        unsetC();
      } else {
        setC((java.lang.Boolean)value);
      }
      break;

    case DIFFICULTY:
      if (value == null) {
        unsetDifficulty();
      } else {
        setDifficulty((java.lang.Double)value);
      }
      break;

    case RKS:
      if (value == null) {
        unsetRks();
      } else {
        setRks((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LEVEL:
      return getLevel();

    case S:
      return getS();

    case A:
      return getA();

    case C:
      return isC();

    case DIFFICULTY:
      return getDifficulty();

    case RKS:
      return getRks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LEVEL:
      return isSetLevel();
    case S:
      return isSetS();
    case A:
      return isSetA();
    case C:
      return isSetC();
    case DIFFICULTY:
      return isSetDifficulty();
    case RKS:
      return isSetRks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SongLevel)
      return this.equals((SongLevel)that);
    return false;
  }

  public boolean equals(SongLevel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (!this.level.equals(that.level))
        return false;
    }

    boolean this_present_s = true;
    boolean that_present_s = true;
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (this.s != that.s)
        return false;
    }

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (this.a != that.a)
        return false;
    }

    boolean this_present_c = true;
    boolean that_present_c = true;
    if (this_present_c || that_present_c) {
      if (!(this_present_c && that_present_c))
        return false;
      if (this.c != that.c)
        return false;
    }

    boolean this_present_difficulty = true;
    boolean that_present_difficulty = true;
    if (this_present_difficulty || that_present_difficulty) {
      if (!(this_present_difficulty && that_present_difficulty))
        return false;
      if (this.difficulty != that.difficulty)
        return false;
    }

    boolean this_present_rks = true;
    boolean that_present_rks = true;
    if (this_present_rks || that_present_rks) {
      if (!(this_present_rks && that_present_rks))
        return false;
      if (this.rks != that.rks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
    if (isSetLevel())
      hashCode = hashCode * 8191 + level.getValue();

    hashCode = hashCode * 8191 + s;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a);

    hashCode = hashCode * 8191 + ((c) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(difficulty);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rks);

    return hashCode;
  }

  @Override
  public int compareTo(SongLevel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLevel(), other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetS(), other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA(), other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetC(), other.isSetC());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDifficulty(), other.isSetDifficulty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDifficulty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difficulty, other.difficulty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRks(), other.isSetRks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rks, other.rks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SongLevel(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    if (this.level == null) {
      sb.append("null");
    } else {
      sb.append(this.level);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s:");
    sb.append(this.s);
    first = false;
    if (!first) sb.append(", ");
    sb.append("a:");
    sb.append(this.a);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c:");
    sb.append(this.c);
    first = false;
    if (!first) sb.append(", ");
    sb.append("difficulty:");
    sb.append(this.difficulty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rks:");
    sb.append(this.rks);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (level == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'level' was not present! Struct: " + toString());
    }
    // alas, we cannot check 's' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'c' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'difficulty' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rks' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SongLevelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SongLevelStandardScheme getScheme() {
      return new SongLevelStandardScheme();
    }
  }

  private static class SongLevelStandardScheme extends org.apache.thrift.scheme.StandardScheme<SongLevel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SongLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = Level.findByValue(iprot.readI32());
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.s = iprot.readI32();
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a = iprot.readDouble();
              struct.setAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // C
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.c = iprot.readBool();
              struct.setCIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIFFICULTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.difficulty = iprot.readDouble();
              struct.setDifficultyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RKS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rks = iprot.readDouble();
              struct.setRksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetS()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 's' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetC()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'c' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDifficulty()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'difficulty' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rks' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SongLevel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.level != null) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(S_FIELD_DESC);
      oprot.writeI32(struct.s);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(A_FIELD_DESC);
      oprot.writeDouble(struct.a);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(C_FIELD_DESC);
      oprot.writeBool(struct.c);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIFFICULTY_FIELD_DESC);
      oprot.writeDouble(struct.difficulty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RKS_FIELD_DESC);
      oprot.writeDouble(struct.rks);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SongLevelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SongLevelTupleScheme getScheme() {
      return new SongLevelTupleScheme();
    }
  }

  private static class SongLevelTupleScheme extends org.apache.thrift.scheme.TupleScheme<SongLevel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SongLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeI32(struct.level.getValue());
      oprot.writeI32(struct.s);
      oprot.writeDouble(struct.a);
      oprot.writeBool(struct.c);
      oprot.writeDouble(struct.difficulty);
      oprot.writeDouble(struct.rks);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SongLevel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.level = Level.findByValue(iprot.readI32());
      struct.setLevelIsSet(true);
      struct.s = iprot.readI32();
      struct.setSIsSet(true);
      struct.a = iprot.readDouble();
      struct.setAIsSet(true);
      struct.c = iprot.readBool();
      struct.setCIsSet(true);
      struct.difficulty = iprot.readDouble();
      struct.setDifficultyIsSet(true);
      struct.rks = iprot.readDouble();
      struct.setRksIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

