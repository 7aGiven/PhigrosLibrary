#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Level(object):
    EZ = 0
    HD = 1
    IN = 2
    AT = 3

    _VALUES_TO_NAMES = {
        0: "EZ",
        1: "HD",
        2: "IN",
        3: "AT",
    }

    _NAMES_TO_VALUES = {
        "EZ": 0,
        "HD": 1,
        "IN": 2,
        "AT": 3,
    }


class Summary(object):
    """
    Attributes:
     - saveUrl
     - saveVersion
     - challenge
     - rks
     - gameVersion
     - avatar

    """


    def __init__(self, saveUrl=None, saveVersion=None, challenge=None, rks=None, gameVersion=None, avatar=None,):
        self.saveUrl = saveUrl
        self.saveVersion = saveVersion
        self.challenge = challenge
        self.rks = rks
        self.gameVersion = gameVersion
        self.avatar = avatar

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.saveUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.saveVersion = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I16:
                    self.challenge = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.rks = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.gameVersion = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.avatar = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Summary')
        if self.saveUrl is not None:
            oprot.writeFieldBegin('saveUrl', TType.STRING, 1)
            oprot.writeString(self.saveUrl.encode('utf-8') if sys.version_info[0] == 2 else self.saveUrl)
            oprot.writeFieldEnd()
        if self.saveVersion is not None:
            oprot.writeFieldBegin('saveVersion', TType.BYTE, 2)
            oprot.writeByte(self.saveVersion)
            oprot.writeFieldEnd()
        if self.challenge is not None:
            oprot.writeFieldBegin('challenge', TType.I16, 3)
            oprot.writeI16(self.challenge)
            oprot.writeFieldEnd()
        if self.rks is not None:
            oprot.writeFieldBegin('rks', TType.DOUBLE, 4)
            oprot.writeDouble(self.rks)
            oprot.writeFieldEnd()
        if self.gameVersion is not None:
            oprot.writeFieldBegin('gameVersion', TType.BYTE, 5)
            oprot.writeByte(self.gameVersion)
            oprot.writeFieldEnd()
        if self.avatar is not None:
            oprot.writeFieldBegin('avatar', TType.STRING, 6)
            oprot.writeString(self.avatar.encode('utf-8') if sys.version_info[0] == 2 else self.avatar)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.saveUrl is None:
            raise TProtocolException(message='Required field saveUrl is unset!')
        if self.saveVersion is None:
            raise TProtocolException(message='Required field saveVersion is unset!')
        if self.challenge is None:
            raise TProtocolException(message='Required field challenge is unset!')
        if self.rks is None:
            raise TProtocolException(message='Required field rks is unset!')
        if self.gameVersion is None:
            raise TProtocolException(message='Required field gameVersion is unset!')
        if self.avatar is None:
            raise TProtocolException(message='Required field avatar is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SongLevel(object):
    """
    Attributes:
     - id
     - level
     - s
     - a
     - c
     - difficulty
     - rks

    """


    def __init__(self, id=None, level=None, s=None, a=None, c=None, difficulty=None, rks=None,):
        self.id = id
        self.level = level
        self.s = s
        self.a = a
        self.c = c
        self.difficulty = difficulty
        self.rks = rks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.s = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.a = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.c = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.difficulty = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.rks = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SongLevel')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 2)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.s is not None:
            oprot.writeFieldBegin('s', TType.I32, 3)
            oprot.writeI32(self.s)
            oprot.writeFieldEnd()
        if self.a is not None:
            oprot.writeFieldBegin('a', TType.DOUBLE, 4)
            oprot.writeDouble(self.a)
            oprot.writeFieldEnd()
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.BOOL, 5)
            oprot.writeBool(self.c)
            oprot.writeFieldEnd()
        if self.difficulty is not None:
            oprot.writeFieldBegin('difficulty', TType.DOUBLE, 6)
            oprot.writeDouble(self.difficulty)
            oprot.writeFieldEnd()
        if self.rks is not None:
            oprot.writeFieldBegin('rks', TType.DOUBLE, 7)
            oprot.writeDouble(self.rks)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.level is None:
            raise TProtocolException(message='Required field level is unset!')
        if self.s is None:
            raise TProtocolException(message='Required field s is unset!')
        if self.a is None:
            raise TProtocolException(message='Required field a is unset!')
        if self.c is None:
            raise TProtocolException(message='Required field c is unset!')
        if self.difficulty is None:
            raise TProtocolException(message='Required field difficulty is unset!')
        if self.rks is None:
            raise TProtocolException(message='Required field rks is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SongExpect(object):
    """
    Attributes:
     - id
     - level
     - acc
     - expect

    """


    def __init__(self, id=None, level=None, acc=None, expect=None,):
        self.id = id
        self.level = level
        self.acc = acc
        self.expect = expect

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.acc = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.expect = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SongExpect')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 2)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        if self.acc is not None:
            oprot.writeFieldBegin('acc', TType.DOUBLE, 3)
            oprot.writeDouble(self.acc)
            oprot.writeFieldEnd()
        if self.expect is not None:
            oprot.writeFieldBegin('expect', TType.DOUBLE, 4)
            oprot.writeDouble(self.expect)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.id is None:
            raise TProtocolException(message='Required field id is unset!')
        if self.level is None:
            raise TProtocolException(message='Required field level is unset!')
        if self.acc is None:
            raise TProtocolException(message='Required field acc is unset!')
        if self.expect is None:
            raise TProtocolException(message='Required field expect is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Summary)
Summary.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'saveUrl', 'UTF8', None, ),  # 1
    (2, TType.BYTE, 'saveVersion', None, None, ),  # 2
    (3, TType.I16, 'challenge', None, None, ),  # 3
    (4, TType.DOUBLE, 'rks', None, None, ),  # 4
    (5, TType.BYTE, 'gameVersion', None, None, ),  # 5
    (6, TType.STRING, 'avatar', 'UTF8', None, ),  # 6
)
all_structs.append(SongLevel)
SongLevel.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'level', None, None, ),  # 2
    (3, TType.I32, 's', None, None, ),  # 3
    (4, TType.DOUBLE, 'a', None, None, ),  # 4
    (5, TType.BOOL, 'c', None, None, ),  # 5
    (6, TType.DOUBLE, 'difficulty', None, None, ),  # 6
    (7, TType.DOUBLE, 'rks', None, None, ),  # 7
)
all_structs.append(SongExpect)
SongExpect.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'level', None, None, ),  # 2
    (3, TType.DOUBLE, 'acc', None, None, ),  # 3
    (4, TType.DOUBLE, 'expect', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
